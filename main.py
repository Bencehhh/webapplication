from flask import Flask, jsonify, request
import os
import requests
import json

app = Flask(__name__)

# Load secrets from environment variables
API_KEY = os.environ.get("API_KEY")
DISCORD_WEBHOOK_URL = os.environ.get("WEBHOOK_URL")

# Home route for a health check
@app.route('/')
def home():
    return "Web App is Running!"

# Webhook endpoint
@app.route('/webhook', methods=['POST'])
def webhook():
    # Check if secrets are missing
    if not DISCORD_WEBHOOK_URL:
        app.logger.error("Discord webhook URL is missing!")
        return jsonify({"status": "error", "message": "Missing Discord webhook URL"}), 500

    if not API_KEY:
        app.logger.error("API key is missing!")
        return jsonify({"status": "error", "message": "Missing API key"}), 500

    # Validate API key
    auth_key = request.headers.get('Authorization')
    if auth_key != f"Bearer {API_KEY}":
        app.logger.warning("Unauthorized access attempt detected!")
        return jsonify({"status": "error", "message": "Unauthorized"}), 403

    # Extract and validate payload
    data = request.json
    if not data:
        app.logger.error("No payload received in the request!")
        return jsonify({"status": "error", "message": "No data received"}), 400

    app.logger.info("Payload received from Roblox: %s", json.dumps(data, indent=4))

    # Extract data fields with defaults
    place_id = data.get('placeId', 'N/A')
    server_id = data.get('serverId', 'N/A')
    player_data = data.get('playerData', 'No players in the server.')
    join_leave_logs = data.get('joinLeaveLogs', 'No recent activity.')
    chat_logs = data.get('chatLogs', 'No messages.')

    # Prepare Discord webhook payload
    discord_payload = {
        "embeds": [
            {
                "title": "Roblox Moderation Log",
                "description": "Server Activity Report",
                "color": 3447003,  # Blue color
                "fields": [
                    {"name": "Place ID", "value": str(place_id), "inline": True},
                    {"name": "Server ID", "value": str(server_id), "inline": True},
                    {"name": "Players", "value": player_data, "inline": False},
                    {"name": "Join/Leave Logs", "value": join_leave_logs, "inline": False},
                    {"name": "Chat Logs", "value": chat_logs, "inline": False},
                ],
                "footer": {
                    "text": "Generated by Roblox Moderation System",
                    "icon_url": "https://i.imgur.com/AfFp7pu.png",  # Optional footer icon
                },
            }
        ]
    }

    # Debug: Log the Discord payload
    app.logger.debug("Payload to be sent to Discord: %s", json.dumps(discord_payload, indent=4))

    # Send the data to Discord webhook
    try:
        response = requests.post(DISCORD_WEBHOOK_URL, json=discord_payload)
        if response.status_code == 204:  # No Content (success)
            app.logger.info("Message sent to Discord successfully!")
            return jsonify({"status": "success"}), 200
        else:
            app.logger.error("Failed to send message to Discord: %s %s", response.status_code, response.text)
            return jsonify({"status": "error", "message": "Failed to send to Discord"}), 500
    except requests.exceptions.RequestException as e:
        app.logger.exception("Exception occurred while sending to Discord:")
        return jsonify({"status": "error", "message": str(e)}), 500


if __name__ == "__main__":
    # Set debugging for development purposes
    app.run(host="0.0.0.0", port=8080, debug=true)
